#!/usr/bin/python
import subprocess, logging
import sys, os, time
import traceback
import pymongo, json, statistics,xlsxwriter

ROOT=os.path.dirname(os.path.abspath(__file__))

#print ROOT
#MONGO
mongo_server='192.168.8.10'
mongo_port=27017 
dbname="dbTest150223_2215"
correlation="collection"

#logging options: 
main_log=ROOT+"/log/dockemu.log"

#defaults:
bots=2
ftpservers=1
imagegg="dockemu/ftp:staticip"    #get image for good guys with ftp server and static ip
imagebot="dockemu/botnet"         #get image for botnet guys
server="172.17.5.100"
duration=5
delay=0
dockers=[]

try:
    os.remove(main_log)
except OSError:
    pass
logging.basicConfig(filename=main_log,level=logging.DEBUG,  format='%(asctime)s %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p')

#clear screen
os.system(['clear','cls'][os.name =='nt'])

#cmd="docker stop $(docker ps -a -q &>/dev/null ) &>/dev/null  && docker rm $(docker ps -a -q &>/dev/null ) &>/dev/null"
#p = subprocess.Popen(cmd , shell=True)
#intro banner
print "##############################################"
print "##############################################"
print "______ _____ _____  _   __ ________  ____   _ "
print "|  _  \  _  /  __ \| | / /|  ___|  \/  | | | |"
print "| | | | | | | /  \/| |/ / | |__ | .  . | | | |"
print "| | | | | | | |    |    \ |  __|| |\/| | | | |"
print "| |/ /\ \_/ / \__/\| |\  \| |___| |  | | |_| |"
print "|___/  \___/ \____/\_| \_/\____/\_|  |_/\___/ "
print ""
print "##############################################"
print "#########  WELCOME TO DOCKEMU V.2.0  #########"
print "###  BRUTE FORCE ATTACK TO MESH NEWTORKS #####"
print "##############################################"
print ""
print ""


try:
	dbname = raw_input('Enter the mongo DB name: [defaults=%s]: '%dbname)
	print
except KeyboardInterrupt:
	sys.exit(0)
except:
	print " mongo DB name not provided, using defaults (%s)"%dbname
	print
	dbname="dbTest150223_2215"


try:
	ftpservers = input('How many ftpservers do you need? [defaults=%s]: '%ftpservers)
	print
except KeyboardInterrupt:
	sys.exit(0)
except:
	print " ftpservers not provided, using defaults (%s)"%ftpservers
	print

try:
	bots = input('How many bots do you need? [defaults=%s]: '%bots)
	print
except KeyboardInterrupt:
	sys.exit(0)
except:
	print " bots not provided, using defaults (%s)"%bots
	print

#duration of the experiment
try:
	duration = input('Enter the duration of the attack [defaults=%s s], -1=forever:  '%duration)
	print
except KeyboardInterrupt:
	sys.exit(0)
except:
	print "duration not provided, using defaults (%s)"%duration
	print 


def start_ibf():
	print "start IBF server"
	#cmd = "/usr/bin/java -cp java -cp 'frameworkssh.jar:commons-io-2.4.jar:mongo-java-driver-2.12.2.jar' com.galileo.phd.securityframework.ssh.core.Main -logFilePath /var/log/auth.log -mongoServer monserver.galileo.edu -database %s -protocol ftp:proftpd"%dbname
	#p = subprocess.Popen(cmd , shell=True,cwd="/home/chepeftw")
	cmd = "screen -S fire-%i /usr/bin/java -cp 'frameworkssh.jar:commons-io-2.4.jar:mongo-java-driver-2.12.2.jar'  com.galileo.phd.securityframework.ssh.core.Main -logFilePath /var/log/auth.log -mongoServer monserver.galileo.edu -database %s"%(dbname,dbname)
	print cmd
	p = subprocess.Popen(cmd , shell=True)

names=[]

ftpserver_ips=[]
def start_ftpservers():
	#by the moment just support 253 ftpservers
	if ftpservers > 253:
		print "ftpservers can not be > 253"
		sys.exit(0)
	print "STARTING FTP servers"

	#Starting servers
	for i in range(ftpservers):
		
		cmd="docker run -e 'ipaddress=172.17.%s.5' -d -v %s/log/:/var/log/dockemu/ --name dockemu-ftpserver-%s --privileged %s &>/dev/null"%(i,ROOT,i,imagegg)
		print cmd
		try:
			print
			try:
				p = subprocess.Popen(cmd , shell=True)
				logging.info("STARTING dockemu-ftpserver-%s with IPAddress 172.17.%s.5"%(i,i))
				dockers.append("dockemu-ftpserver-%s"%i)
				ftpserver_ips.append("172.17.%s.5 "%i)
				cmd="/usr/bin/java -cp 'frameworkssh.jar:commons-io-2.4.jar:mongo-java-driver-2.12.2.jar' com.galileo.phd.securityframework.ssh.core.NewFireWall -firewallIp 172.17.%s.5 -database %s -mongoServer monserver.galileo.edu"%(i,dbname)
				p = subprocess.Popen(cmd , shell=True)
				time.sleep(1)
			except:
				print traceback.format_exc()
				print "CANNOT START dockemu-ftpserver-%s"%i

		except:
			print traceback.format_exc()
			print "ERROR IN LOG dockemu-ftpserver-%s"%i
	failed=False
	time.sleep(2)




# print ftpserver_list
# print ftpserver_ips
bot_ips=[]
def start_botnet():
	if bots > 253:
		print "bots can not be > 253"
		sys.exit(0)
	print "STARTING DOCKEMU BOT-NET ...."

	for i in range(bots):
		cmd="docker run -d -v %s/log/:/var/log/dockemu/ --name  dockemu-botnet-%s %s  '%s' &>/dev/null"%(ROOT,i,imagebot,' '.join(ftpserver_ips))
		print cmd
		try:
			print
			try:
				p = subprocess.Popen(cmd , shell=True)
				logging.info("STARTING dockemu-botnet-%s"%i)
				dockers.append("dockemu-botnet-%s"%i)
				time.sleep(1)
			except:
				print "CANNOT START dockemu-%s"%i
			
			output = subprocess.check_output("docker inspect dockemu-botnet-%s"%i, shell=True)
			for IP in output.splitlines():
				if "IPAddress" in IP:
					print IP
					bot_ips.append(IP.split(": ")[1].replace("\"","").replace(","," "))
					logging.info("dockemu-botnet "+str(i)+IP)
		except:
			print traceback.format_exc()
			print "ERROR IN LOG dockemu-%s"%i
		time.sleep(delay)
print bot_ips


def stop_all():
	failed=False
	if duration > 0:
		print
		print "Waiting %ss to stop the attack (all docker botnet)"%duration
		time.sleep(duration)
		
		try:
			for container in dockers:
				print "Killing %s"%container
				
				try:
					print "kill"
					cmd="docker kill %s"%container
					p = subprocess.Popen(cmd , shell=True)
					time.sleep(3)
				except:
					print "error KIll"
				try:
					print "RM"
					cmd="docker rm  -f %s"%container
					p = subprocess.Popen(cmd , shell=True)
				except:
					print "RM error"
				logging.info("ENDING %s"%container)
		except:
			print "execept"
			cmd="docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q)"
			p = subprocess.Popen(cmd , shell=True)




def stats_bots(dbname):
	client = pymongo.MongoClient(mongo_server, mongo_port)
	correlation="correlation"

	db = client[dbname]
	collection = db[correlation]
	#ip = ['172.17.1.33','172.17.1.34','172.17.1.17','61.174.49.103','88.150.196.163','213.154.85.75','91.240.163.39','77.222.131.3']
	#dbname="dbTest150210-1200"


	#array=[{u'falseMatch': 8}, {u'falseMatch': 4}, {u'falseMatch': 5}, {u'falseMatch': 6}]
	#print bot_ips
	array=[]
	#Finding false matches
	for ip in bot_ips:
		falseMatches = collection.find_one({'sourceIP':ip.strip()},{'falseMatch':1,'_id':0})
		#print ip.strip()+"as"
		#print falseMatches
		array+=[falseMatches]

	count=[]
	for falseMatches in array:
		try:
			count.append(falseMatches['falseMatch'])
		except:
			print traceback.format_exc()
			
	#print count

	try:
		mean=statistics.mean(count)
		median= statistics.median(count)
		stdev=statistics.stdev(count)
		maximum=max(count)
		minimum=min(count)

		workbook = xlsxwriter.Workbook('dockemu_bots.xlsx')
		worksheet = workbook.add_worksheet()
		row=0
		col=0
		for ip,times in zip(bot_ips,count):
			worksheet.write(row, col, ip)
			worksheet.write(row, col + 1, times)
			row += 1
		print "BOTS AVERAGE: "+str(mean)
		print "BOTS MEDIAN: "+str(median)
		print "BOTS STDEV: "+str(stdev)
		print "BOTS MAX: "+str(maximum)
		print "BOTS MIN: "+str(minimum)
		workbook.close()
	except:
		print traceback.format_exc()

def stats_servers(dbname):
	client = pymongo.MongoClient(mongo_server, mongo_port)
	db = client[dbname]
	correlation="logs"

	collection = db[correlation]

	count=[]
	#Finding false matches
	for ip in ftpserver_ips:
		times = collection.find({'destinationIP':ip.strip()}).count()
		print times
		print ip
		#print ip.strip()+"as"
		#print falseMatches
		count+=[times]


	try:
		mean=statistics.mean(count)
		median= statistics.median(count)
		stdev=statistics.stdev(count)
		maximum=max(count)
		minimum=min(count)

		workbook = xlsxwriter.Workbook('dockemu_servers.xlsx')
		worksheet = workbook.add_worksheet()
		row=0
		col=0
		for ip,times in zip(ftpserver_ips,count):
			worksheet.write(row, col, ip)
			worksheet.write(row, col + 1, times)
			row += 1
		print "SERVERS AVERAGE: "+str(mean)
		print "SERVERS MEDIAN: "+str(median)
		print "SERVERS STDEV: "+str(stdev)
		print "SERVERS MAX: "+str(maximum)
		print "SERVERS MIN: "+str(minimum)
		workbook.close()
	except:
		print traceback.format_exc()

#start_ibf()
start_ftpservers()
start_botnet()

stop_all()
time.sleep(10)
stats_bots(dbname)
stats_servers(dbname)



